====================================
|	PART I
====================================
#. Refrence file: kern/pmap.h, inc/memlayout.h, inc/x86.h
#. boot_alloc()
	if n > 0, just return the current nextfree, and refresh the next to (n/PGSIZE + 1) * PGSIZE, where the PGSIZE is set to 4k in the lab. Check the memory whether is out of memory. If the nextfree's physical address is bigger than the npages * PGSIZE, it said to be out of memory.
#. mem_init()
	the struct Page array. Just allocate npages struct Page, and set each free Page the pp_link linking to the next one, and the pp_ref(link_count) is 0, and last link to the free_page_list.
	the page at the EXTPHYSMEM is used to store the pages array
#. check_kern_pgdir() // check the mem_init()
	n - how many pages the Pages array allocated.
#. 	PADDR - kernel virtual address to physical address
	KADDR - physical virtual address to kernel virtual address
===================================
|	PART II
===================================
#. pgdir_walk()
	given the pgdir( I think it is the .cr0), and the linear address va, return the page table entry address.
	In the inc/mmu.h, there is a graphic of a linear address, PDX(va) is the offset of the page directory. *(pgidr + PDX(va)) is the entry of the page table. PTX(va) is the page table
	I have a bug when trace the page2pa(pp2) == check_va2pa(kern_pgdir, PGSIZE), that because when set the pte, I forget to cast the pte to a pointer, that is, it add 1 but 4.